// Prototypes
occaDeviceFunction datafloat laserPower(datafloat time);
occaDeviceFunction datafloat initialTemperature(datafloat x, datafloat y, datafloat z);
occaDeviceFunction datafloat sourceFunction(datafloat x , datafloat y , datafloat z, 
			 datafloat x0, datafloat y0, datafloat z0, 
			 datafloat volumeFraction, 
			 datafloat muA_muTr      , datafloat muEff);
occaDeviceFunction datafloat DirichletTemp(unsigned int bcTag, datafloat time,
			datafloat x, datafloat y, datafloat z);
occaDeviceFunction datafloat RobinCoeff(unsigned int bcTag, datafloat x, datafloat y, datafloat z,
		     datafloat kappa, datafloat h);
occaDeviceFunction datafloat NeumannDeriv(unsigned int bcTag, datafloat time, 
		       datafloat x, datafloat y, datafloat z,
		       datafloat nx, datafloat ny, datafloat nz);
occaDeviceFunction datafloat exactSolution(datafloat x, datafloat y, datafloat z, datafloat time,
			datafloat kappa, datafloat lambda);

/*
 * Compile-time definitions
 *   - bodyTemperature    = ambient body temperature
 *   - coolantTemperature = probe coolant temperature
 *   - laserMaxPower      = reference laser power
 */

/// Laser power as a function of time
/**
 * @param time
 */
occaDeviceFunction datafloat laserPower(datafloat time) {
  // Laser turns off at 10 min
  if( 0<=time && time<600 )
    return laserMaxPower;
  else
    return laserMaxPower;
}

/// Initial temperature
/**
 * Boundary conditions will be enforced afterwards
 * @param x
 * @param y
 * @param z
 * @param bodyTemperature
 * @return initial temperature
 */
occaDeviceFunction datafloat initialTemperature(datafloat x, datafloat y, datafloat z) {
  return bodyTemperature;
}

/// Heating at a point due to a region of the laser tip
/**
 * @param x
 * @param y
 * @param z
 * @param x0 x-coordinate of centroid of laser tip region
 * @param y0 y-coordinate of centroid of laser tip region
 * @param z0 z-coordinate of centroid of laser tip region
 * @param volumeFraction volume fraction of laser tip region relative to the 
 *          entire laser tip
 * @param mu_a absorption coefficient of laser light in tissue
 * @param mu_eff effective absorption (\f$\mu_\text{eff}=\sqrt{3\mu_a\mu_{tr}}\f$)
 * @param mu_tr transport coefficient (\f$\mu_{tr}=\mu_a + \mu_s (1-g)\f$)
 * @return contribution of source point to heating function
 */
occaDeviceFunction datafloat sourceFunction(datafloat x , datafloat y , datafloat z, 
			 datafloat x0, datafloat y0, datafloat z0, 
			 datafloat volumeFraction, 
			 datafloat muA_muTr      , datafloat muEff) {
  // Distance between point and source point
  datafloat dist = (x - x0)*(x - x0) + (y - y0)*(y - y0) + (z - z0)*(z - z0);
  dist = sqrt(dist);

  // Choose minimum distance to avoid dividing by zero
  if(dist < 1e-6)
    return 0;

  // Return contribution to forcing function
  return 0.75*M_1_PI*muA_muTr*volumeFraction*exp(-muEff*dist)/dist;
}


/// Returns the temperature corresponding to a Dirichlet boundary condition
/**
 * @param bcTag type of boundary condition
 *          - 1 = body temperature Dirichlet boundary condition
 *          - 2 = coolant temperature Dirichlet boundary condition
 * @param x
 * @param y
 * @param z
 * @param time
 * @return Dirichlet boundary condition temperature
 */
occaDeviceFunction datafloat DirichletTemp(unsigned int bcTag, datafloat time, 
			datafloat x, datafloat y, datafloat z) {
  switch(bcTag) {
  case 1:  return bodyTemperature;
  case 2:  return coolantTemperature;
  default: break;
  }
  
  return bodyTemperature;
}

/// Returns the coefficient corresponding to a Robin boundary condition
/**
 * We assume a Robin boundary condition of the form 
 *   \f[\kappa\frac{\partial u}{\partial n}=-\alpha\left(u-u_b\right)\f]
 * @param bcTag type of boundary condition
 *          - 3 = Neumann boundary condition (\f$\alpha=0\f$)
 *          - 4 = Robin condition at probe
 * @param x
 * @param y
 * @param z
 * @param kappa thermal conductivity
 * @param h heat transfer coefficient
 * @return \f$\alpha\f$
 */
occaDeviceFunction datafloat RobinCoeff(unsigned int bcTag, 
		     datafloat x, datafloat y, datafloat z,
		     datafloat kappa, datafloat h) {
  switch(bcTag) {
  case 3:
    return 0;
  case 4:
    return h; // Heat transfer coefficient
  default: return 0;
  }
}		  


/// Returns the derivative corresponding to a Neumann boundary condition
/**
 * Note: not currently used
 * @param bcTag type of boundary condition
 * @param time
 * @param x
 * @param y
 * @param z
 * @param nx x-coordinate of surface normal vector
 * @param ny y-coordinate of surface normal vector
 * @param nz z-coordinate of surface normal vector
 */
occaDeviceFunction datafloat NeumannDeriv(unsigned int bcTag, datafloat time, 
		       datafloat x, datafloat y, datafloat z,
		       datafloat nx, datafloat ny, datafloat nz){
  // Homogeneous Neumann
  return 0;
}

/// Analytic solution
/**
 * Note: an analytic solution is not known for this case. 
 * The numerical solution can be compared with the analytic solution, if it 
 *   is known
 * @param kappa tissue thermal conductivity
 * @param lambda (tissue density)*(tissue specific heat)/dt 
 *                 + (perfusion)*(blood specific heat)
 * @param x
 * @param y
 * @param z
 * @param time
 * @return temperature
 */
occaDeviceFunction datafloat exactSolution(datafloat x, datafloat y, datafloat z, datafloat time,
			datafloat kappa, datafloat lambda){
  return bodyTemperature;
}
